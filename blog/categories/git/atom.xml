<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Ray12321]]></title>
  <link href="http://guori12321.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://guori12321.github.io/"/>
  <updated>2014-01-08T10:16:32+08:00</updated>
  <id>http://guori12321.github.io/</id>
  <author>
    <name><![CDATA[Ray12321]]></name>
    <email><![CDATA[guori12321@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的git路线图]]></title>
    <link href="http://guori12321.github.io/blog/2013/08/18/wo-de-gitlu-xian/"/>
    <updated>2013-08-18T01:13:00+08:00</updated>
    <id>http://guori12321.github.io/blog/2013/08/18/wo-de-gitlu-xian</id>
    <content type="html"><![CDATA[<p>Git是广大人民群众喜闻乐见的版本控制器。以前写代码的时候经常碰到这种情况：想尝试着加点新功能，结果发现出了很严重的bug，想回滚代码，却没有办法，只能根据回忆一点点删改新加入的代码。后来，每当要进行大的变动时，就把原来的代码打个包，备份下。这样做非常的笨。Git就解决了这种问题。</p>

<p>可是，虽然所有人都说git简单易用，但我入门时还是费了很多力气的。以下是我使用git的路线图：</p>

<!-- more -->


<ul>
<li><p>入门教材：<a href="http://www.21andy.com/blog/uploads/downloads/2010/12/git_tutorial.pdf">看日记学git</a>，这是我见过的最好的git学习资料了。看了前十几天的内容就好。</p></li>
<li><p><code>git rm</code>与<code>rm</code>的同步问题：在git下使用<code>rm</code>命令的时候，会将工作区的文件删掉，但是，git仓库中的文件并不会被删掉。也就是说，现在看来，文件确实是没了，但在commit之后再回滚回来，那些文件，又会出来了。解决办法是，用<code>git rm</code>命令，这样，仓库中的文件也被删掉。不过，我经常忘记用<code>git rm</code>，怎么办呢？很简单，下次add的时候，多加个参数：<code>git add -u</code>，这样会自动刷新暂存区，之后暂存区中的文件就与工作区中的文件一一对应了。git add -h中的介绍是
<code>
-u, --update          update tracked files
</code></p></li>
<li><p><code>git rm --cached filename</code>: 与上一条的区别是，这仅仅删除index中的文件，而不会删除working tree中的文件。适用于不小心push了不想公开的文件到github上。这时，在本地rm &mdash;cached之后，别<code>git add .</code>，直接commit就好。</p></li>
<li><p><code>git reset</code>与<code>git revert</code>的区别：前者是撤销某次commit，后者是回滚代码到某一次commit。此外，前者会删改git的历史（比如说，你撤销了某次commit，这样的话，git的历史中就不会记录这次commit了），而后者不会（事实上，revert会把当前工作区中的代码恢复到以前的某次commit，然后新增加一次新的commit）。有点晕是吧，<a href="http://stackoverflow.com/questions/8358035/whats-the-difference-between-git-revert-checkout-and-reset/8358039#8358039">stackOverflow上有很详细的讲解</a>。当然，更晕的是，通过加不同的参数，这两个命令，有时可以起同样的作用。不要研究太深，需要用到的时候再去查就好。</p></li>
</ul>


<h2>git submodule</h2>

<p>有些时候我们会想在一个版本库中调用另一个版本库的代码，或者像我在香港实习时遇到的要保持本机上和服务器上某些代码一致的问题。这时候，用git submodule就是非常好的选择。</p>

<p><a href="http://git-scm.com/book/en/Git-Tools-Submodules">官方文档</a>对它的介绍已经很完善了。只是，这东西怎么看着都不靠谱啊！比如说，各个submodule的版本问题，<a href="http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/">有些时候会比较坑</a>，另外，就连官方文档里都有"It’s strange, but it works.&ldquo;和"Then, you e-mail that guy and yell at him."。</p>

<p>现在看来，各个版本库之间的关系有点乱，很容易出现问题。所以说，大家要小心~另外发现这么一篇<a href="http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/">黑它的文章</a>&hellip;</p>

<p>未完待续&hellip;</p>
]]></content>
  </entry>
  
</feed>
