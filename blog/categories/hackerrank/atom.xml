<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hackerrank | Ray12321]]></title>
  <link href="http://guori12321.github.io/blog/categories/hackerrank/atom.xml" rel="self"/>
  <link href="http://guori12321.github.io/"/>
  <updated>2013-12-14T18:05:54+08:00</updated>
  <id>http://guori12321.github.io/</id>
  <author>
    <name><![CDATA[Ray12321]]></name>
    <email><![CDATA[guori12321@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HackerRank K-mismatch题解]]></title>
    <link href="http://guori12321.github.io/blog/2013/08/25/hackerrank-k-mismatchti-jie/"/>
    <updated>2013-08-25T14:39:00+08:00</updated>
    <id>http://guori12321.github.io/blog/2013/08/25/hackerrank-k-mismatchti-jie</id>
    <content type="html"><![CDATA[<p>其实算不上题解，只是讲讲自己的解题的思路吧。最后也没做出来，50分拿了25分。</p>

<p><a href="https://www.hackerrank.com/contests/quantium/challenges/k-mismatch">题目地址</a></p>

<p>给定一个字符串，对它的任意两个长度相同的子串，若这两个子串的同一位置处的不同的字符的个数少于一个阈值k，就将这两个子串统计下来。问，一共有多少个满足要求的子串对。</p>

<!--more-->


<p>同一个字符串，有很多子串，子串对就更多了。因此这道题目对算法的效率的要求就比较高了。最朴素的办法，是，先枚举子串的长度，再枚举第一个和第二个子串的起始位置，之后再比较两个子串的不同字符的个数。这样的话，是O(N<sup>4</sup>)的复杂度。</p>

<p>分析下上面的思路，有哪里做了<strong>重复工作</strong>呢？是最后比较的那里，因为对于长度相同而位置只差一位的两个子串来说，它两只是错了一位而已，没必要全部重新比较下。我们可以用<strong>扩展</strong>的办法，来进行子串的比较。</p>

<p>具体就是：先枚举第一个和第二个子串起点的差值（即这两个子串的距离），再枚举第一，二个子串的起点。刚开始的时候，把两个子串所有位置都比较一次，把不同的字符的个数记录下来。之后，这两二个子串分别向后移动了一位，这时，只用比较移出去的那位字符，和移进来的新字符是否相同就好了，根据这两位字符的情况，在上一次的记录上加减就好了。这样对空间的要求也不高，只用了一个临时的记录不同字符的int而已。（事实上我先是开了很大的数组，后来才发现可以优化）</p>

<p>代码如下：
```</p>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>def mismatch(a, b):</p>

<pre><code>global K
tot = 0
for i in range(len(a)):
    if a[i] != b[i]:
        tot += 1
        if tot &gt; K:
            return K+1
return tot
</code></pre>

<p>K = int(raw_input())
S = raw_input()</p>

<p>ans = 0
team = []</p>

<h1>先计算小于 或 等于K的子串对</h1>

<p>for i in xrange(1,K+1):</p>

<pre><code>ans += ((len(S) - i + 1)*(len(S) - i)) / 2
</code></pre>

<h1>枚举两个子串的位置的差值 边界值：第一个子串固定，第二个一直移动到最后</h1>

<p>for i in xrange(1, len(S) &ndash; (K+1)+1):</p>

<pre><code>#misMatrix[0][i] = mismatch(S[0:K+1], S[i:i+K+1])
mis0 = mismatch(S[0:K+1], S[i:i+K+1])
if mis0 &lt;= K:
    ans += 1

#枚举第一个子串的其它位置，第二个子串和它距离为i
for j in xrange(1, len(S)-(K+1)):
    if j+i+K &gt;= len(S):
        break
    #misMatrix[j][j+i] = misMatrix[j-1][j+i-1]
    mis = mis0
    if S[j-1] != S[j+i-1]:
        mis -= 1
    if S[j+K] != S[j+i+K]:
        mis += 1
    if mis &lt;= K:
        ans += 1

        zz = 0
        t = mis
        while j-zz &gt;= 0 and t &lt;= K:
            zz += 1
            if j-zz &lt; 0:
                break
            if S[j-zz] != S[j+i-zz]:
                t += 1
                if t &lt;= K:
                    ans += 1
                else:
                    break
            else:
                ans += 1

    mis0 = mis
</code></pre>

<p>print ans
```</p>

<p>然后就只拿了25分&hellip;做这个题目花了很久的时间，加起来三四个小时了吧，因为一些边界和变量名打错的bug一直没调出来&hellip;写代码还是要头脑清醒啊。</p>

<p>谁会做告诉我下吧&hellip;谢谢&hellip;</p>
]]></content>
  </entry>
  
</feed>
