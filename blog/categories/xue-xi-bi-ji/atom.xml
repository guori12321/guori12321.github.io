<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 学习笔记 | Ray12321]]></title>
  <link href="http://guori12321.github.io/blog/categories/xue-xi-bi-ji/atom.xml" rel="self"/>
  <link href="http://guori12321.github.io/"/>
  <updated>2013-12-31T22:10:15+08:00</updated>
  <id>http://guori12321.github.io/</id>
  <author>
    <name><![CDATA[Ray12321]]></name>
    <email><![CDATA[guori12321@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mac下安装LaTeX]]></title>
    <link href="http://guori12321.github.io/blog/2013/10/15/macxia-an-zhuang-latex/"/>
    <updated>2013-10-15T18:31:00+08:00</updated>
    <id>http://guori12321.github.io/blog/2013/10/15/macxia-an-zhuang-latex</id>
    <content type="html"><![CDATA[<p>LaTeX的重要性我就不多说了。这是最靠谱的写论文的方式，比Word靠谱多了。</p>

<p>我是参考<a href="http://blog.renren.com/blog/279888129/773543899">康同学的人人网日志</a>，来配置的。</p>

<!--more-->


<p>在Mac下安装Tex非常的简单，首先从<a href="http://tug.org/mactex/mirrorpage.html">源列表</a>里挑一个速度比较快的（我用的是日本的，平均500K的样子），然后打开安装就好。</p>

<p>安装后，打开TeXShop，就可以写TeX文档了。这时，我发现中文显示出来乱码，于是，<a href="http://blog.csdn.net/quantumpo/article/details/9317925">参考了这篇文章</a>，在TeXShop中，在<code>宏</code>下面的<code>Encoding</code>中，选择<code>UTF-8 Unicode</code>，之后就可以正常使用中文了。</p>

<h2>关于参考文献和bibtex</h2>

<p>折腾了一早上总算搞明白怎么在LaTeX里加入参考文献了。</p>

<p>其实很简单，比如说，你有两个文件，一个叫<code>main.tex</code>，一个叫<code>mybib.bib</code>，然后你要在前者中引用后者。后者是一个数据库，也就是说，你可以在后者中加入很多的东西，而不在tex中引用。我们编译的时候，也只针对tex编译，而不针对bib文件。</p>

<p>首先，在main.tex的\end{document}<strong>之前</strong>，加入
<code>
\bibliographystyle{model1-num-names} %选择bib的模板，也就是说，参考文献显示出来是什么样子。这种模板一般会由你要投稿的会议或期刊给出。
\bibliography{mybib} %指定你要引用的bib文件，注意，这里**不加**.tex
</code></p>

<p>然后，是在你的bib文件中，写入你要引用的论文。在<a href="scholar.google.com">scholar.google.com</a>中可以直接粘出来符合要求的bib格式的引用，直接粘到你的bib文件中就好。不同的论文之间空上一行就好。比如说，下面这篇是我的某篇论文的bib引用
<code>
@incollection{guo2013cuvim,
  title={CUVIM: extracting fresh information from social network},
  author={Guo, Rui and Wang, Hongzhi and Li, Kaiyu and Li, Jianzhong and Gao, Hong},
  booktitle={Web-Age Information Management},
  pages={351--362},
  year={2013},
  publisher={Springer}
}
</code></p>

<p>接下来，就是要在你的tex文件中引用这个bib中的论文。直接在要引用的地方，输入<code>\cite{something}</code>就好。在上面的例子中，是<code>\cite{guo2013cuvim}</code>。</p>

<p>这时，你已经完成了tex源代码上的操作。下来就是编译。要编译好几次(以下操作也可以在TeXShop中完成)</p>

<p><code>
pdflatex main.tex %注意，是pdflatex，不是pdftex
bibtex main %注意，这里是main，不是main.tex，也不是mybib或mybib.bib
pdflatex main.tex
pdflatex main.tex
</code></p>

<h3>总结一下容易出错的地方</h3>

<p>其实很多地方容易出错。</p>

<ul>
<li>在tex中引用bib文件时，不加.bib</li>
<li>在latex和pdftex时，要加.tex缩写名</li>
<li>在bibtex时，是针对tex编译，而不是bib文件，另外，tex也不加缩写名。</li>
<li>编译时，如果用pdftex而不是pdflatex，会报错。具体参考<a href="http://www.latex-community.org/forum/viewtopic.php?f=5&amp;t=3164">这里</a>。</li>
</ul>


<p>另外，在写tex时，有以下容易犯的错误</p>

<ul>
<li>对于下标，如a_b，如果不对单词b加{}，则latex只默认b中的第一个字母为a的下标，其它的字母是和a并列的。也就是说，当单词b多于一个字母的时候，我们要对它加{}。</li>
</ul>


<h2>在LaTeX中引用URL</h2>

<p>写论文的时候，有时候要在参考文献中引用一些网址（比如Stanford的SNAP组的数据）。<a href="http://tex.stackexchange.com/questions/35977/how-to-add-a-url-to-a-latex-bibtex-file">这里</a>很清楚的讲解了这个问题。</p>

<p>首先在tex中，/usepackage{url}，之后就在bib中插入下面的代码就好
<code>
@misc{bworld,
  author = {Ingo Lütkebohle},
  title = ,
  howpublished = "\url{http://aiweb.techfak.uni-bielefeld.de/content/bworld-robot-control-software/}",
  year = {2008},
  note = "[Online; accessed 19-July-2008]"
}
</code></p>

<h2>在LaTeX中用Mathtype</h2>

<p>简单的公式，我也就手写了。可是，复杂的公式，手写完自己都读不懂了。还是老实的用Mathtype吧。</p>

<p>Mac下的Mathtype的安装也十分简单。只是，在Mathtype中写好公式，要粘到LaTeX中，要专门设置一下，不然粘出来的东西很奇怪。</p>

<p>在Mathtype中，找到<code>Preference</code>，再选<code>Cut and Copy Preference</code>，之后选中第二栏<code>MathML or TeX</code>，下拉菜单中选<code>Plain TeX</code>,下面的两个打勾的框都不要打勾。这样，在Mathtype中写好公式，就能直接粘到tex文件中。</p>

<h2>在LaTeX中引用图像</h2>

<p>首先引用包
<code>
\usepackage{graphicx}
</code>
然后就可以使用以下的语句在需要的地方引用图像了。我只试过png图像(在figures文件夹下的figure1.png)是可以的，其它的<a href="http://bbs.sjtu.edu.cn/bbstcon,board,TeX_LaTeX,reid,1254670022.html">参考这里</a>。</p>

<p>```
\begin{figure}</p>

<pre><code>\centering
\includegraphics[width=1\textwidth]{figures/figure1}
\caption{The Updating Ratio of an Inactive Account}
\label{figure:inactive}
</code></pre>

<p>\end{figure}
<code>``
之后引用图像的时候，用</code>Figure ~\ref{figure:inactive}`就能引用了。</p>

<h2>使用表格</h2>

<p>下面是一个使用表格的例子
```
\begin{table}
\centering</p>

<pre><code>\begin{tabular}{|c|c|c|c|}
        \hline
        Weight &amp; Message Number &amp; Total Crawl Time &amp; Avg \#Msg. with 1 crawling \\
        \hline
        0.9 &amp; 1451435 &amp; 50421 &amp; 28.79 \\
        \hline
\end{tabular}
\caption{The Hash Model Experiment Results}
\label{table:hash}
</code></pre>

<p>\end{table}
<code>``
与图表一样，之后引用的时候，用</code>Table ~\ref{table:hash}`。</p>

<h2>引用伪代码</h2>

<p><a href="http://blog.renren.com/share/302655693/15587298311">这篇清华科协的人人网日志</a>讲的非常清楚。如果安装MacTeX时，是安装的完整版，则不用下载要用的包，MacTeX本身就已经带了。</p>

<p><a href="http://www.cs.dartmouth.edu/~thc/clrscode/clrscode.sty">伪代码包的文档</a>，也许需要用。</p>

<h2>在公式中加入文字</h2>

<p>用<code>\mbox{}</code>，例子如下</p>

<p>```
$$
\sum Part_0 &ndash; \sum Part_1 = \left{ \begin{array}{ll}</p>

<pre><code>    0 &amp; n \ \mbox{mod} \ 4=0 \\
</code></pre>

<p>f_0 &amp; n \ \mbox{mod} \ 4=1 \
&ndash;\Delta &amp; n \ \mbox{mod} \ 4=2 \
f_0-\Delta &amp; n \ \mbox{mod} \ 4=3 \
\end{array} \right.
$$
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的摄影路线图]]></title>
    <link href="http://guori12321.github.io/blog/2013/10/14/wo-de-she-ying-lu-xian/"/>
    <updated>2013-10-14T12:03:00+08:00</updated>
    <id>http://guori12321.github.io/blog/2013/10/14/wo-de-she-ying-lu-xian</id>
    <content type="html"><![CDATA[<p>在香港实习，拿到第一个月的工资的时候，我就做了一件梦寐以求的事：买单反。有些事情，我们会后悔做了，有些事情，我们会后悔没做。一直想用精美的照片来记载那些一点点流逝的岁月。如果说买单反真有什么后悔的，那就是，买的太晚了。</p>

<p>经喵叔推荐，在D3200，D5200中摇摆了一阵子，最后决定多花点钱买D5200好了。其实在D5200和700D中我也摇摆了好一会，后来觉得佳能的入门机确实不怎么地道，参数上比D5200差了很多，多加的功能如触屏对焦，单反真的需要这个功能吗？？</p>

<p>下面是我的摄影路线图~大家见笑了。</p>

<!--more-->


<h2>学习资料推荐</h2>

<p><a href="http://camerasim.com/camera-simulator/">一个还不错的单反模拟网站</a>。之所以说还不错，是因为这个模拟起来还是很不爽，不能直接对照之前模拟出的照片。</p>

<p>待续</p>

<h2>各项基本参数</h2>

<p>相机上有很多照相时基本参数的设定。每项参数都有不同的作用。多照一些，多试试，就会对这些参数有感觉了。</p>

<ul>
<li><p>快门速度: 这个比较好理解，就是照相时，快门打开多久。时间越长，照片就越亮，同时手抖的影响就越大。</p></li>
<li><p>光圈大小: 就是打开快门的时候，入光孔的直径大小。它和快门速度，一起决定了曝光量的大小。同时，由于小孔成像的原理，光圈对于景深(就是相片中背景的虚化程序，景深越小，则相片中清晰的范围越小，背景越模糊)，有着重要影响。光圈越小，背景就越清晰，光圈越大，背景就越模糊。注意，为了量化光圈大小，人们搞了个叫光圈值的东西，也就是f4，f8这种f后面的数值。而光圈值和光圈是反比的关系。也就是说，光圈值越大，光圈越小。我相信你已经看晕了，我也是。</p></li>
<li><p>ISO: 这个叫感光度。实际上相当于把光学信息放大的倍数。也就是说，感光度越高，就只需要越少的光，同时画质也会越差。它的作用相当于扩音器，把人的声音放大，但这样，也同时放大了噪音。ISO高的时候，色彩会变得很差，同时会有大量的噪点。</p></li>
<li><p>白平衡: 也就是说你的照片是偏红还是偏蓝。一般来说，发红的照片让人觉得非常的温暖，而发蓝的让人感觉冷。</p></li>
</ul>


<p>我现在照相，还处于用A档，开最大光圈，如果光线比较暗再把ISO调大一点的水平。</p>

<h2>关于后期</h2>

<p>一点都不会！！所以说，待续&hellip;</p>

<h2>关于PS CS5报错</h2>

<p>在打开Nikon的NEF格式的图片时，报错
<code>
无法完成请求，因为该文件似乎来自于已安装版本的 Camera Raw 不支持的相机型号。
请访问 Camera Raw 帮助文档以获取更多信息。
</code>
然后就去官网下了各种<a href="http://www.adobe.com/support/downloads/product.jsp?platform=Macintosh&amp;product=106">Camera Raw和DNG Converter</a>，然后发现，还是打不开&hellip;</p>

<p>其实，Camera Raw，是一个独立的程序。先把NEF格式的文件，用它转化为DNG格式，再用PS打开DNG格式的就好。并不是说安了它以后，PS就能直接打开NEF了。当然，也有能直接打开的办法，但那好像需要CS6以上的版本了。我没有试过。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB路线图]]></title>
    <link href="http://guori12321.github.io/blog/2013/09/02/mongodblu-xian-tu/"/>
    <updated>2013-09-02T15:48:00+08:00</updated>
    <id>http://guori12321.github.io/blog/2013/09/02/mongodblu-xian-tu</id>
    <content type="html"><![CDATA[<p><code>MongoDB</code>是非常有名的No SQL数据库，话说还真是适应不了No SQL的思维，每次都想着先建表&hellip;。以下是我学习MongoDB的路线图：</p>

<!--more-->


<p><strong>2013-10-31 一定要小心使用collection.update()!!!这个命令并不是说，把新的属性加上，而是把档案直接update为你要更新的值!!在程序跑到一半的时候，我查看了下，结果发现数据全丢了！！！心脏都要停止跳动了！！！</strong></p>

<h2>路线图</h2>

<ol>
<li><p>首先肯定是看看<a href="http://www.mongodb.org/">官网的资料了</a>。这里面有最初级的教程，以及最详细权威的文档。走一遍它的教程后，相信你会对MongoDB有最初步的了解，学习深入后，再来这里查询文档。只是，这里没有难度适中的教程。要么有太多的细节，要么太过简略了。</p></li>
<li><p>一篇很好的<a href="http://www.eduyo.com/database/nosql/805.html">中文简易教程</a>，看一遍就知道MongoDB有哪些神奇的功能了～</p></li>
<li><p><a href="http://blog.nosqlfan.com/html/2989.html">python使用Mongo的教程</a></p></li>
</ol>


<h2>关于Mongod和Mongo命令</h2>

<p>听pili讲了好一会，才有了一点概念：Mongod比Mongo高一层，Mongod可以指定路径(&mdash;dbpath)，Mongo则是指定端口。同一个Mongod可以有好几个Mongo。总体感觉Mongod相当于SQL中的connection，如果两个Mongod指向不同的路径，那么它俩就没有交互，可以独立的读写，而不用担心读和写同时进行，而让数据乱掉。</p>

<p>我现在对它俩的关系的理解就是，Mongod相当于C++中的流，Mongo就是具体的文件。</p>

<p>可以为Mongod和Mongo指定端口。不同的Mongod必须使用不同的端口。不同的Mongo可以使用同一端口。当Mongo和Mongod使用同一端口的时候，这个Mongo就挂到Mongod上了。具体在python中，Mongod相当于一个connection。</p>

<h2>其它要注意的</h2>

<ul>
<li><p>MongoDB的索引值只能为<strong>string</strong>，很神奇~</p></li>
<li><p>要想指定ObjectID，只用在插入的时候，指定"_id"参数就好</p></li>
<li><p>关于同一个collection的大小：之前在用MySQL存微博上的数据的时候，同一张表中存入10万条微博，读写的速度都在0.04秒左右，一旦上百万级，就要5秒左右，完全不可以接受。当时把百万级的数据分成了十个表。关于MongoDB存多少合适，我的实验结果是四亿条数据（每条数据都只有一个_id和一个int型的属性值）内都没有问题，一早上插入了4亿条数据，耗时在0.1秒以内就找到了，整个库有50多G。在测试时，每插入5万条左右的数据，就会卡那么一秒，之后再接着插入。应该是MongoDB内部在新建一些结构吧。</p></li>
<li><p>Mongodb的索引只能是string类型，但_id的类型可以是int</p></li>
</ul>


<p>未完待续&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给octopress添加3D标签云]]></title>
    <link href="http://guori12321.github.io/blog/2013/08/20/gei-octopresstian-jia-3dyun-biao-qian/"/>
    <updated>2013-08-20T13:26:00+08:00</updated>
    <id>http://guori12321.github.io/blog/2013/08/20/gei-octopresstian-jia-3dyun-biao-qian</id>
    <content type="html"><![CDATA[<p>3D标签云的效果看右栏。很炫很神奇～</p>

<p>具体做法是：</p>

<ol>
<li><p>从我的github库中<a href="https://github.com/guori12321/octopress-cumulus/archive/master.zip">下载源代码</a></p></li>
<li><p>把相应的文件粘到自己octopress，另外在边栏那里把它显示出来就好。具体参考我的github上的<a href="https://github.com/guori12321/octopress-cumulus">README</a>。</p></li>
</ol>


<h2>Octopress 3D categories/tags-cloud configuration for non-English tags</h2>

<p>You can see my 3D categories-tag at the right sidebar. It&rsquo;s awesome! However, the origin version doesn&rsquo;t support <strong>non-English</strong> tags, so I revised the codes and put them in my github. It now works!</p>

<p>It&rsquo;s easy to configuration:</p>

<ol>
<li><p>Download the source codes from my <a href="https://github.com/guori12321/octopress-cumulus/archive/master.zip">github repo</a></p></li>
<li><p>Copy the codes to your octopress. The detail is given at <a href="https://github.com/guori12321/octopress-cumulus">my github repo README</a></p></li>
</ol>


<!--more-->


<h2>我之前碰到的问题</h2>

<p>主要是不支持汉语标签。虽然这个插件的作者是中国人，但是他俩的博客都是全英文，所以不存在这个问题。我还是很想用汉语标签的。octopress本身支持汉语标签，点击汉语标签后，会发现它把路径中的汉字转成<strong>拼音</strong>了，所以说就不存在汉语路径的问题。</p>

<p>这个插件原本是直接用汉语作路径的，于是我就按照<a href="http://notes.liyaos.com/blog/2013/01/18/octopress/">这篇文章</a>把标签的路径设定为汉语的了。在本地上preview没问题，但deploy到github上就无法识别，会报404错误。怀疑与github那边的编码方式有关。</p>

<p>既然无法用汉语作路径，那还是按octopress原先的办法，用拼音作路径吧。于是我对这个插件进行了<a href="https://github.com/guori12321/octopress-cumulus/commit/0af2339ba1f2ce574a8a17d706e56b3aee6835a1">小小的改动</a>。终于，一切正常了～～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的git路线图]]></title>
    <link href="http://guori12321.github.io/blog/2013/08/18/wo-de-gitlu-xian/"/>
    <updated>2013-08-18T01:13:00+08:00</updated>
    <id>http://guori12321.github.io/blog/2013/08/18/wo-de-gitlu-xian</id>
    <content type="html"><![CDATA[<p>Git是广大人民群众喜闻乐见的版本控制器。以前写代码的时候经常碰到这种情况：想尝试着加点新功能，结果发现出了很严重的bug，想回滚代码，却没有办法，只能根据回忆一点点删改新加入的代码。后来，每当要进行大的变动时，就把原来的代码打个包，备份下。这样做非常的笨。Git就解决了这种问题。</p>

<p>可是，虽然所有人都说git简单易用，但我入门时还是费了很多力气的。以下是我使用git的路线图：</p>

<!-- more -->


<ul>
<li><p>入门教材：<a href="http://www.21andy.com/blog/uploads/downloads/2010/12/git_tutorial.pdf">看日记学git</a>，这是我见过的最好的git学习资料了。看了前十几天的内容就好。</p></li>
<li><p><code>git rm</code>与<code>rm</code>的同步问题：在git下使用<code>rm</code>命令的时候，会将工作区的文件删掉，但是，git仓库中的文件并不会被删掉。也就是说，现在看来，文件确实是没了，但在commit之后再回滚回来，那些文件，又会出来了。解决办法是，用<code>git rm</code>命令，这样，仓库中的文件也被删掉。不过，我经常忘记用<code>git rm</code>，怎么办呢？很简单，下次add的时候，多加个参数：<code>git add -u</code>，这样会自动刷新暂存区，之后暂存区中的文件就与工作区中的文件一一对应了。git add -h中的介绍是
<code>
-u, --update          update tracked files
</code></p></li>
<li><p><code>git rm --cached filename</code>: 与上一条的区别是，这仅仅删除index中的文件，而不会删除working tree中的文件。适用于不小心push了不想公开的文件到github上。这时，在本地rm &mdash;cached之后，别<code>git add .</code>，直接commit就好。</p></li>
<li><p><code>git reset</code>与<code>git revert</code>的区别：前者是撤销某次commit，后者是回滚代码到某一次commit。此外，前者会删改git的历史（比如说，你撤销了某次commit，这样的话，git的历史中就不会记录这次commit了），而后者不会（事实上，revert会把当前工作区中的代码恢复到以前的某次commit，然后新增加一次新的commit）。有点晕是吧，<a href="http://stackoverflow.com/questions/8358035/whats-the-difference-between-git-revert-checkout-and-reset/8358039#8358039">stackOverflow上有很详细的讲解</a>。当然，更晕的是，通过加不同的参数，这两个命令，有时可以起同样的作用。不要研究太深，需要用到的时候再去查就好。</p></li>
</ul>


<h2>git submodule</h2>

<p>有些时候我们会想在一个版本库中调用另一个版本库的代码，或者像我在香港实习时遇到的要保持本机上和服务器上某些代码一致的问题。这时候，用git submodule就是非常好的选择。</p>

<p><a href="http://git-scm.com/book/en/Git-Tools-Submodules">官方文档</a>对它的介绍已经很完善了。只是，这东西怎么看着都不靠谱啊！比如说，各个submodule的版本问题，<a href="http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/">有些时候会比较坑</a>，另外，就连官方文档里都有"It’s strange, but it works.&ldquo;和"Then, you e-mail that guy and yell at him."。</p>

<p>现在看来，各个版本库之间的关系有点乱，很容易出现问题。所以说，大家要小心~另外发现这么一篇<a href="http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/">黑它的文章</a>&hellip;</p>

<p>未完待续&hellip;</p>
]]></content>
  </entry>
  
</feed>
